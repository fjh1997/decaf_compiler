Executing test "samples/stmtbad1.decaf"

Executing test "samples/interface.decaf"
1c1,133
< Segmentation fault
---
> 
>    Program: 
>   1   InterfaceDecl: 
>   1      Identifier: Colorable
>   2      FnDecl: 
>   2         (return type) NamedType: 
>   2            Identifier: Color
>   2         Identifier: GetColor
>   3      FnDecl: 
>             (return type) Type: void
>   3         Identifier: SetColor
>   3         (formals) VarDecl: 
>   3            NamedType: 
>   3               Identifier: Color
>   3            Identifier: c
>   6   ClassDecl: 
>   6      Identifier: Color
>   7      FnDecl: 
>             (return type) Type: void
>   7         Identifier: SetRGB
>   7         (formals) VarDecl: 
>                Type: int
>   7            Identifier: red
>   7         (formals) VarDecl: 
>                Type: int
>   7            Identifier: green
>   7         (formals) VarDecl: 
>                Type: int
>   7            Identifier: blue
>             (body) StmtBlock: 
>   8            AssignExpr: 
>   8               FieldAccess: 
>   8                  This: 
>   8                  Identifier: red
>   8               Operator: =
>   8               FieldAccess: 
>   8                  Identifier: red
>   9            AssignExpr: 
>   9               FieldAccess: 
>   9                  This: 
>   9                  Identifier: green
>   9               Operator: =
>   9               FieldAccess: 
>   9                  Identifier: green
>  10            AssignExpr: 
>  10               FieldAccess: 
>  10                  This: 
>  10                  Identifier: blue
>  10               Operator: =
>  10               FieldAccess: 
>  10                  Identifier: blue
>  12      VarDecl: 
>             Type: int
>  12         Identifier: red
>  13      VarDecl: 
>             Type: int
>  13         Identifier: green
>  14      VarDecl: 
>             Type: int
>  14         Identifier: blue
>  17   ClassDecl: 
>  17      Identifier: Shape
>  17      (implements) NamedType: 
>  17         Identifier: Colorable
>  19      FnDecl: 
>  19         (return type) NamedType: 
>  19            Identifier: Color
>  19         Identifier: GetColor
>             (body) StmtBlock: 
>  19            ReturnStmt: 
>  19               FieldAccess: 
>  19                  Identifier: myColor
>  20      FnDecl: 
>             (return type) Type: void
>  20         Identifier: SetColor
>  20         (formals) VarDecl: 
>  20            NamedType: 
>  20               Identifier: Color
>  20            Identifier: c
>             (body) StmtBlock: 
>  20            AssignExpr: 
>  20               FieldAccess: 
>  20                  Identifier: myColor
>  20               Operator: =
>  20               FieldAccess: 
>  20                  Identifier: c
>  22      VarDecl: 
>  22         NamedType: 
>  22            Identifier: Color
>  22         Identifier: myColor
>  25   ClassDecl: 
>  25      Identifier: Rectangle
>  25      (extends) NamedType: 
>  25         Identifier: Shape
>  29   FnDecl: 
>          (return type) Type: void
>  29      Identifier: main
>          (body) StmtBlock: 
>  30         VarDecl: 
>  30            NamedType: 
>  30               Identifier: Colorable
>  30            Identifier: s
>  31         VarDecl: 
>  31            NamedType: 
>  31               Identifier: Color
>  31            Identifier: green
>  33         AssignExpr: 
>  33            FieldAccess: 
>  33               Identifier: green
>  33            Operator: =
>  33            NewExpr: 
>  33               NamedType: 
>  33                  Identifier: Color
>  34         Call: 
>  34            FieldAccess: 
>  34               Identifier: green
>  34            Identifier: SetRGB
>  34            (actuals) IntConstant: 0
>  34            (actuals) IntConstant: 0
>  34            (actuals) IntConstant: 255
>  35         AssignExpr: 
>  35            FieldAccess: 
>  35               Identifier: s
>  35            Operator: =
>  35            NewExpr: 
>  35               NamedType: 
>  35                  Identifier: Rectangle
>  36         Call: 
>  36            FieldAccess: 
>  36               Identifier: s
>  36            Identifier: SetColor
>  36            (actuals) FieldAccess: 
>  36               Identifier: green

Executing test "samples/bad6.decaf"

Executing test "samples/expressions.decaf"

Executing test "samples/switchbad3.decaf"
2,4c2,4
< *** Error line 2.
<     switch(expr) {
<                  ^
---
> *** Error line 8.
>         default:
>         ^^^^^^^

Executing test "samples/bad3.decaf"

Executing test "samples/bad7.decaf"

Executing test "samples/bad1.decaf"

Executing test "samples/ifstmtexprerror.decaf"

Executing test "samples/functions.decaf"

Executing test "samples/simple.decaf"

Executing test "samples/bad5.decaf"

Executing test "samples/bad2.decaf"

Executing test "samples/inheritance.decaf"

Executing test "samples/switch.decaf"
2,6c2,212
< *** Error line 12.
< 	switch (n) {
<                    ^
< *** syntax error
< 
---
>    Program: 
>   5   FnDecl: 
>          (return type) Type: void
>   5      Identifier: small
>          (body) StmtBlock: 
>   7         VarDecl: 
>                Type: int
>   7            Identifier: n
>             PrintStmt: 
>   9            (args) StringConstant: "What is the rank of the card? (1-13)"
>  10         AssignExpr: 
>  10            FieldAccess: 
>  10               Identifier: n
>  10            Operator: =
>  10            ReadIntegerExpr: 
>             SwitchStmt: 
>  12            FieldAccess: 
>  12               Identifier: n
>                Case: 
>  13               IntConstant: 1
>                   PrintStmt: 
>  13                  (args) StringConstant: "Ace"
>  13               BreakStmt: 
>                Case: 
>  14               IntConstant: 11
>                   PrintStmt: 
>  14                  (args) StringConstant: "Jack"
>  14               BreakStmt: 
>                Case: 
>  15               IntConstant: 12
>                   PrintStmt: 
>  15                  (args) StringConstant: "Queen"
>  15               BreakStmt: 
>                Case: 
>  16               IntConstant: 13
>                   PrintStmt: 
>  16                  (args) StringConstant: "King"
>  16               BreakStmt: 
>                Default: 
>                   PrintStmt: 
>  17                  (args) FieldAccess: 
>  17                     Identifier: n
>  17               BreakStmt: 
>  21   FnDecl: 
>          (return type) Type: void
>  21      Identifier: medium
>          (body) StmtBlock: 
>  23         VarDecl: 
>                Type: int
>  23            Identifier: a
>  24         VarDecl: 
>                Type: int
>  24            Identifier: b
>  26         AssignExpr: 
>  26            FieldAccess: 
>  26               Identifier: a
>  26            Operator: =
>  26            ReadIntegerExpr: 
>  27         AssignExpr: 
>  27            FieldAccess: 
>  27               Identifier: b
>  27            Operator: =
>  27            ReadIntegerExpr: 
>             SwitchStmt: 
>  29            ArithmeticExpr: 
>  29               ArithmeticExpr: 
>  29                  ArithmeticExpr: 
>  29                     FieldAccess: 
>  29                        Identifier: a
>  29                     Operator: *
>  29                     IntConstant: 22
>  29                  Operator: +
>  29                  FieldAccess: 
>  29                     Identifier: b
>  29               Operator: /
>  29               IntConstant: 14
>                Case: 
>  30               IntConstant: 123
>                   PrintStmt: 
>  30                  (args) FieldAccess: 
>  30                     Identifier: a
>  31               AssignExpr: 
>  31                  FieldAccess: 
>  31                     Identifier: b
>  31                  Operator: =
>  31                  IntConstant: 23
>                Case: 
>  33               IntConstant: 224
>                   PrintStmt: 
>  33                  (args) FieldAccess: 
>  33                     Identifier: b
>  33               BreakStmt: 
>                Case: 
>  35               IntConstant: 233
>  35               AssignExpr: 
>  35                  FieldAccess: 
>  35                     Identifier: a
>  35                  Operator: =
>  35                  ArithmeticExpr: 
>  35                     FieldAccess: 
>  35                        Identifier: b
>  35                     Operator: *
>  35                     IntConstant: 2
>  36               AssignExpr: 
>  36                  FieldAccess: 
>  36                     Identifier: b
>  36                  Operator: =
>  36                  IntConstant: 3
>  37               AssignExpr: 
>  37                  FieldAccess: 
>  37                     Identifier: a
>  37                  Operator: =
>  37                  IntConstant: 23
>  38               BreakStmt: 
>                Case: 
>  40               IntConstant: 41
>  40               BreakStmt: 
>                Default: 
>  42               BreakStmt: 
>  47   FnDecl: 
>          (return type) Type: void
>  47      Identifier: large
>          (body) StmtBlock: 
>  48         VarDecl: 
>                Type: int
>  48            Identifier: inputvar
>  49         VarDecl: 
>                Type: int
>  49            Identifier: i
>             PrintStmt: 
>  51            (args) StringConstant: "Enter a number between 1 and 10, inclusive"
>  52         AssignExpr: 
>  52            FieldAccess: 
>  52               Identifier: inputvar
>  52            Operator: =
>  52            ReadIntegerExpr: 
>             SwitchStmt: 
>  54            FieldAccess: 
>  54               Identifier: inputvar
>                Case: 
>  56               IntConstant: 2
>                Case: 
>  57               IntConstant: 4
>                Case: 
>  58               IntConstant: 6
>                Case: 
>  59               IntConstant: 8
>                Case: 
>  60               IntConstant: 10
>                   ForStmt: 
>  61                  (init) AssignExpr: 
>  61                     FieldAccess: 
>  61                        Identifier: i
>  61                     Operator: =
>  61                     IntConstant: 1
>  61                  (test) RelationalExpr: 
>  61                     FieldAccess: 
>  61                        Identifier: i
>  61                     Operator: <=
>  61                     FieldAccess: 
>  61                        Identifier: inputvar
>  61                  (step) PostfixExpr: 
>  61                     FieldAccess: 
>  61                        Identifier: i
>  61                     Operator: ++
>                      (body) PrintStmt: 
>  62                     (args) FieldAccess: 
>  62                        Identifier: i
>                   PrintStmt: 
>  63                  (args) StringConstant: "even"
>  64               BreakStmt: 
>                Case: 
>  66               IntConstant: 1
>                Case: 
>  67               IntConstant: 3
>                Case: 
>  68               IntConstant: 5
>                Case: 
>  69               IntConstant: 7
>                Case: 
>  70               IntConstant: 9
>                   StmtBlock: 
>                      ForStmt: 
>  71                     (init) AssignExpr: 
>  71                        FieldAccess: 
>  71                           Identifier: i
>  71                        Operator: =
>  71                        IntConstant: 1
>  71                     (test) RelationalExpr: 
>  71                        FieldAccess: 
>  71                           Identifier: i
>  71                        Operator: <=
>  71                        FieldAccess: 
>  71                           Identifier: inputvar
>  71                     (step) PostfixExpr: 
>  71                        FieldAccess: 
>  71                           Identifier: i
>  71                        Operator: ++
>                         (body) PrintStmt: 
>  72                        (args) FieldAccess: 
>  72                           Identifier: i
>                      PrintStmt: 
>  73                     (args) StringConstant: "odd"
>  74                  BreakStmt: 
>                Default: 
>                   PrintStmt: 
>  77                  (args) StringConstant: "not between 1 and 10"
>  82   FnDecl: 
>          (return type) Type: void
>  82      Identifier: main
>          (body) StmtBlock: 

Executing test "samples/rvaluedecr.decaf"
4c4
<        ^
---
>      ^^

Executing test "samples/incrdecr.decaf"
2,6c2,36
< *** Error line 10.
<   i++;
<     ^
< *** syntax error
< 
---
>    Program: 
>   5   FnDecl: 
>          (return type) Type: void
>   5      Identifier: main
>          (body) StmtBlock: 
>   7         VarDecl: 
>                Type: int
>   7            Identifier: i
>   8         VarDecl: 
>                Type: int
>   8            Identifier: j
>  10         PostfixExpr: 
>  10            FieldAccess: 
>  10               Identifier: i
>  10            Operator: ++
>  11         AssignExpr: 
>  11            FieldAccess: 
>  11               Identifier: j
>  11            Operator: =
>  11            PostfixExpr: 
>  11               FieldAccess: 
>  11                  Identifier: i
>  11               Operator: --
>  12         AssignExpr: 
>  12            FieldAccess: 
>  12               Identifier: j
>  12            Operator: =
>  12            ArithmeticExpr: 
>  12               PostfixExpr: 
>  12                  FieldAccess: 
>  12                     Identifier: i
>  12                  Operator: ++
>  12               Operator: +
>  12               FieldAccess: 
>  12                  Identifier: j

Executing test "samples/switchbad2.decaf"
2,4c2,4
< *** Error line 2.
<     switch(expr) {
<                  ^
---
> *** Error line 4.
>         default:
>         ^^^^^^^

Executing test "samples/bad4.decaf"

Executing test "samples/switchbad1.decaf"
2,4c2,4
< *** Error line 2.
<     switch(expr) {
<                  ^
---
> *** Error line 4.
>         default:
>         ^^^^^^^

Executing test "samples/matrix.decaf"
339,340d338
<  37      (extends) NamedType: 
<  37         Identifier: Matrix

Executing test "samples/rvalueincr.decaf"
4c4
<       ^
---
>      ^^

Executing test "samples/control.decaf"

Executing test "samples/class.decaf"

